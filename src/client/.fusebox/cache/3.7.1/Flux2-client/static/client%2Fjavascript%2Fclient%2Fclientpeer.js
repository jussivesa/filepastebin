module.exports = { contents: "(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../connection/message\", \"../connection/peerwrapper\", \"../connection/externalpromise\", \"../../../shared/constants\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var message_1 = require(\"../connection/message\");\n    var peerwrapper_1 = require(\"../connection/peerwrapper\");\n    var externalpromise_1 = require(\"../connection/externalpromise\");\n    var constants_1 = require(\"../../../shared/constants\");\n    var BYTES_PER_CHUNK = constants_1.Constants.BYTES_PER_CHUNK;\n    var ClientPeer = /** @class */ (function () {\n        function ClientPeer(id, socket, fileName, chunkStart, chunkEnd, chunkSize) {\n            var _this = this;\n            this.id = id;\n            this.socket = socket;\n            this.fileName = fileName;\n            this.chunkStart = chunkStart;\n            this.chunkEnd = chunkEnd;\n            this.chunkSize = chunkSize;\n            this.progress = 0;\n            this.externalPromise = new externalpromise_1.ExternalPromise();\n            this.fileData = [];\n            this.handleMessage = function (message) {\n                _this.rtcWrapper.handleMessage(message);\n                if (message.type === message_1.MessageType.Data) {\n                    _this.onmessage(message.content);\n                }\n            };\n            this.onprogresschanged = function (number) { };\n            this.requestFileChunk = function () { return _this.socket.send(new message_1.Message(_this.id, message_1.MessageType.Request, message_1.MessageAction.CreatePeer, new message_1.FileChunkRequest(_this.fileName, _this.chunkStart, _this.chunkEnd))); };\n            this.init = function () {\n                _this.rtcWrapper.initDataChannel()\n                    .then(function (dataChannel) {\n                    console.log(\"onopen: \" + _this.id);\n                    _this.dataChannel = dataChannel;\n                    _this.dataChannel.onmessage = function (ev) { return _this.onmessage(ev.data); };\n                });\n                _this.requestFileChunk();\n            };\n            this.onmessage = function (message) {\n                if (message !== 'eof') {\n                    _this.fileData.push(message);\n                    _this.progress = (_this.fileData.length * BYTES_PER_CHUNK) / _this.chunkSize;\n                }\n                else {\n                    _this.externalPromise.resolve(_this.fileData);\n                    _this.progress = 1;\n                    if (_this.dataChannel) {\n                        _this.dataChannel.close();\n                        _this.rtcPeer.close();\n                    }\n                }\n                _this.onprogresschanged(_this.progress);\n            };\n            this.rtcPeer = new RTCPeerConnection(constants_1.Constants.PeerConfiguration);\n            this.rtcWrapper = new peerwrapper_1.ClientPeerWrapper(this.rtcPeer, id, socket);\n            this.init();\n        }\n        ClientPeer.prototype.getCompleteListener = function () {\n            return this.externalPromise.promise;\n        };\n        return ClientPeer;\n    }());\n    exports.ClientPeer = ClientPeer;\n});\n//# sourceMappingURL=clientpeer.js.map",
dependencies: ["../connection/message","../connection/peerwrapper","../connection/externalpromise","../../../shared/constants"],
sourceMap: {},
headerContent: undefined,
mtime: 1553221562183,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
