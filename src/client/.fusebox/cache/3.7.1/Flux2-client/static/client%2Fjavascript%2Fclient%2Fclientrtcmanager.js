module.exports = { contents: "var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../../../shared/constants\", \"./clientpeer\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var constants_1 = require(\"../../../shared/constants\");\n    var clientpeer_1 = require(\"./clientpeer\");\n    var NUMBER_WORKERS = constants_1.Constants.NUMBER_WORKERS;\n    var ClientRTCManager = /** @class */ (function () {\n        function ClientRTCManager(socket, fileName, fileSize, fileType) {\n            var _this = this;\n            this.socket = socket;\n            this.fileName = fileName;\n            this.fileSize = fileSize;\n            this.fileType = fileType;\n            this.workers = new Map();\n            this.initializeWorkers = function () {\n                var chunkStart = 0;\n                while (chunkStart < _this.fileSize) {\n                    var id = _this.fileName + chunkStart;\n                    _this.workers.set(id, new clientpeer_1.ClientPeer(id, _this.socket, _this.fileName, chunkStart, Math.min(_this.fileSize, chunkStart + _this.workerFileSize), _this.workerFileSize));\n                    chunkStart += _this.workerFileSize;\n                }\n                Promise.all(__spread(_this.workers.values()).map(function (peer) { return peer.getCompleteListener(); }))\n                    .then(function (value) {\n                    _this.onDataLoaded(value);\n                });\n                __spread(_this.workers.values()).forEach(function (peer) { return peer.onprogresschanged = _this.handleprogresschanged; });\n            };\n            this.handleMessage = function (message) {\n                _this.workers.get(message.senderId).handleMessage(message);\n            };\n            this.onprogresschanged = function (number) { };\n            this.handleprogresschanged = function () {\n                var progress = __spread(_this.workers.values()).map(function (peer) { return peer.progress; })\n                    .map(function (progress) { return progress * (_this.workerFileSize / _this.fileSize) * 100; })\n                    .reduce(function (previousValue, currentValue) { return previousValue + currentValue; });\n                _this.onprogresschanged(progress);\n            };\n            this.onDataLoaded = function (value) {\n                download(new Blob([].concat.apply([], __spread(value)), {\n                    type: _this.fileType\n                }), _this.fileName, _this.fileType);\n            };\n            this.workerFileSize = Math.ceil(fileSize / NUMBER_WORKERS);\n        }\n        return ClientRTCManager;\n    }());\n    exports.ClientRTCManager = ClientRTCManager;\n});\n//# sourceMappingURL=clientrtcmanager.js.map",
dependencies: ["../../../shared/constants","./clientpeer"],
sourceMap: {},
headerContent: undefined,
mtime: 1553221562199,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
