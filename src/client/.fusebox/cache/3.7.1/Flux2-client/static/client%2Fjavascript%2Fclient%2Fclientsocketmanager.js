module.exports = { contents: "(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../../../shared/constants\", \"./clientrtcmanager\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var constants_1 = require(\"../../../shared/constants\");\n    var REQUEST_CLIENT = constants_1.Constants.REQUEST_CLIENT;\n    var REQUEST_CLIENT_ACCEPTED = constants_1.Constants.REQUEST_CLIENT_ACCEPTED;\n    var clientrtcmanager_1 = require(\"./clientrtcmanager\");\n    var MESSAGE = constants_1.Constants.MESSAGE;\n    var ClientSocketManager = /** @class */ (function () {\n        function ClientSocketManager(socket, roomId) {\n            var _this = this;\n            this.socket = socket;\n            this.roomId = roomId;\n            this.requestDownload = function () {\n                if (_this.rtcManager) {\n                    _this.rtcManager.initializeWorkers();\n                }\n            };\n            this.onprogresschanged = function (progress) { };\n            this.requestClient = function () {\n                _this.socket.emit(REQUEST_CLIENT, _this.roomId);\n            };\n            this.requestClientAccepted = function (res) {\n                _this.rtcManager = new clientrtcmanager_1.ClientRTCManager(_this.socket, res.fileName, res.fileSize, res.fileType);\n                _this.rtcManager.onprogresschanged = _this.handleProgressChanged;\n            };\n            this.onmessage = function (message) {\n                _this.rtcManager.handleMessage(message);\n            };\n            this.handleProgressChanged = function (progress) {\n                _this.onprogresschanged(progress);\n            };\n            socket.on(REQUEST_CLIENT_ACCEPTED, this.requestClientAccepted);\n            socket.on(MESSAGE, this.onmessage);\n            this.requestClient();\n        }\n        return ClientSocketManager;\n    }());\n    exports.ClientSocketManager = ClientSocketManager;\n});\n//# sourceMappingURL=clientsocketmanager.js.map",
dependencies: ["../../../shared/constants","./clientrtcmanager"],
sourceMap: {},
headerContent: undefined,
mtime: 1553221562207,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
