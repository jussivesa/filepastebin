module.exports = { contents: "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./message\", \"../../../shared/constants\", \"./externalpromise\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var message_1 = require(\"./message\");\n    var constants_1 = require(\"../../../shared/constants\");\n    var RTC_OPEN = constants_1.Constants.RTC_OPEN;\n    var externalpromise_1 = require(\"./externalpromise\");\n    var READY = constants_1.Constants.READY;\n    var BasePeerWrapper = /** @class */ (function () {\n        function BasePeerWrapper(peer, id, socket) {\n            var _this = this;\n            this.peer = peer;\n            this.id = id;\n            this.socket = socket;\n            this.handleMessage = function (message) {\n                if (message.type !== message_1.MessageType.Signal) {\n                    return;\n                }\n                console.log('Got: ' + JSON.stringify(message));\n                switch (message.action) {\n                    case message_1.MessageAction.IceCandidate:\n                        _this.peer\n                            .addIceCandidate(new RTCIceCandidate(message.content))\n                            .catch(function (err) { return console.error(err); });\n                        break;\n                    case message_1.MessageAction.Offer:\n                        if (message.content !== null) {\n                            _this.peer\n                                .setRemoteDescription(message.content)\n                                .then(function () {\n                                _this.createAnswer();\n                                console.log('Created Answer');\n                            }).catch(function (err) { return console.error(err); });\n                        }\n                        break;\n                    case message_1.MessageAction.Answer:\n                        if (message.content !== null) {\n                            _this.peer\n                                .setRemoteDescription(message.content)\n                                .then(function () {\n                                console.log('Answer set');\n                            }).catch(function (err) { return console.error(err); });\n                        }\n                        break;\n                }\n            };\n            //*****************************\n            // Socket Messages\n            //*****************************\n            this.createOffer = function () { return _this.peer.createOffer()\n                .then(function (desc) {\n                return _this.peer.setLocalDescription(desc);\n            }).then(function (desc) {\n                _this.sendOffer(_this.peer.localDescription.toJSON());\n            }).catch(function (err) { return console.error(err); }); };\n            this.createAnswer = function () { return _this.peer.createAnswer()\n                .then(function (desc) {\n                return _this.peer.setLocalDescription(desc);\n            }).then(function (desc) {\n                _this.sendAnswer(_this.peer.localDescription.toJSON());\n            }).catch(function (err) { return console.error(err); }); };\n            this.sendOffer = function (content) { return _this.socket.send(new message_1.Message(_this.id, message_1.MessageType.Signal, message_1.MessageAction.Offer, content)); };\n            this.sendAnswer = function (content) { return _this.socket.send(new message_1.Message(_this.id, message_1.MessageType.Signal, message_1.MessageAction.Answer, content)); };\n            this.sendIceCandidate = function (content) { return _this.socket.send(new message_1.Message(_this.id, message_1.MessageType.Signal, message_1.MessageAction.IceCandidate, content)); };\n            //***************************\n            // RTC lifecycle\n            //***************************\n            this.onicecandidateerror = function (err) { return console.log('Ice candidate error: ' + JSON.stringify(err)); };\n            this.onicecandidate = function (event) {\n                if (event.hasOwnProperty('candidate')) {\n                    _this.sendIceCandidate(event.candidate);\n                }\n                console.log('Ice Candidate: ' + JSON.stringify(event));\n            };\n            this.onconnectionstatechange = function () { return console.log('Conenction state changed to: ' + _this.peer.connectionState); };\n            this.peer.onconnectionstatechange = this.onconnectionstatechange;\n            this.peer.onicecandidate = this.onicecandidate;\n            this.peer.onicecandidateerror = this.onicecandidateerror;\n        }\n        return BasePeerWrapper;\n    }());\n    exports.BasePeerWrapper = BasePeerWrapper;\n    //***************************************\n    // Host Wrapper\n    //***************************************\n    var HostPeerWrapper = /** @class */ (function (_super) {\n        __extends(HostPeerWrapper, _super);\n        function HostPeerWrapper() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.isNegotiating = false;\n            _this.externalPromise = new externalpromise_1.ExternalPromise();\n            _this.onnegotiationneeded = function () {\n                console.log('Negotiation');\n                if (_this.isNegotiating)\n                    return;\n                _this.isNegotiating = true;\n                _this.createOffer();\n            };\n            _this.onsignalingstatechange = function () {\n                console.log('Signaling state changed: ' + _this.peer.signalingState);\n                _this.isNegotiating = (_this.peer.signalingState !== 'stable');\n            };\n            _this.ondatachannelready = function (message) {\n                if (message.data === READY) {\n                    _this.externalPromise.resolve(_this.dataChannel);\n                }\n            };\n            return _this;\n        }\n        HostPeerWrapper.prototype.initDataChannel = function () {\n            this.peer.onnegotiationneeded = this.onnegotiationneeded;\n            this.peer.onsignalingstatechange = this.onsignalingstatechange;\n            this.dataChannel = this.peer.createDataChannel(this.id);\n            this.dataChannel.onmessage = this.ondatachannelready;\n            return this.externalPromise.promise;\n        };\n        return HostPeerWrapper;\n    }(BasePeerWrapper));\n    exports.HostPeerWrapper = HostPeerWrapper;\n    //*************************************\n    // Client\n    //*************************************\n    var ClientPeerWrapper = /** @class */ (function (_super) {\n        __extends(ClientPeerWrapper, _super);\n        function ClientPeerWrapper() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.externalPromise = new externalpromise_1.ExternalPromise();\n            _this.ondatachannel = function (event) {\n                _this.dataChannel = event.channel;\n                _this.dataChannel.binaryType = 'arraybuffer';\n                if (_this.dataChannel.readyState === RTC_OPEN) {\n                    _this.ondatachannelready();\n                }\n                else {\n                    _this.dataChannel.onopen = function () {\n                        _this.ondatachannelready();\n                    };\n                }\n            };\n            _this.ondatachannelready = function () {\n                _this.externalPromise.resolve(_this.dataChannel);\n                _this.dataChannel.send(READY);\n            };\n            return _this;\n        }\n        ClientPeerWrapper.prototype.initDataChannel = function () {\n            this.peer.ondatachannel = this.ondatachannel;\n            return this.externalPromise.promise;\n        };\n        return ClientPeerWrapper;\n    }(BasePeerWrapper));\n    exports.ClientPeerWrapper = ClientPeerWrapper;\n});\n//# sourceMappingURL=peerwrapper.js.map",
dependencies: ["./message","../../../shared/constants","./externalpromise"],
sourceMap: {},
headerContent: undefined,
mtime: 1553221562163,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
