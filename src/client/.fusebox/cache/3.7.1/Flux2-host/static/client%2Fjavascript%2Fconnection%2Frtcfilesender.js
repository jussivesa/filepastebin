module.exports = { contents: "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../../../shared/constants\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var constants_1 = require(\"../../../shared/constants\");\n    var BYTES_PER_CHUNK = constants_1.Constants.BYTES_PER_CHUNK;\n    var MAX_BUFFER = constants_1.Constants.MAX_BUFFER;\n    var EOF = constants_1.Constants.EOF;\n    var RtcFileSender = /** @class */ (function () {\n        function RtcFileSender(file, dataChannel) {\n            var _this = this;\n            this.file = file;\n            this.dataChannel = dataChannel;\n            this.currentChunk = 0;\n            this.fileReader = new FileReader();\n            this.sendFiles = function (progress) {\n                if (progress === void 0) { progress = 0; }\n                return __awaiter(_this, void 0, void 0, function () {\n                    var start, end;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                this.currentChunk = progress / BYTES_PER_CHUNK;\n                                _a.label = 1;\n                            case 1:\n                                if (!(this.currentChunk * BYTES_PER_CHUNK < this.file.size)) return [3 /*break*/, 5];\n                                if (!(this.dataChannel.bufferedAmount > MAX_BUFFER)) return [3 /*break*/, 3];\n                                return [4 /*yield*/, this.bufferedAmountLow()];\n                            case 2:\n                                _a.sent();\n                                _a.label = 3;\n                            case 3:\n                                start = BYTES_PER_CHUNK * this.currentChunk;\n                                end = Math.min(this.file.size, start + BYTES_PER_CHUNK);\n                                return [4 /*yield*/, this.readAsArrayBuffer(this.file.slice(start, end))];\n                            case 4:\n                                _a.sent();\n                                this.dataChannel.send(this.fileReader.result);\n                                this.currentChunk++;\n                                this.onprogresschanged(this.currentChunk * BYTES_PER_CHUNK);\n                                return [3 /*break*/, 1];\n                            case 5:\n                                this.dataChannel.send(EOF);\n                                return [2 /*return*/];\n                        }\n                    });\n                });\n            };\n            this.onprogresschanged = function (progress_) { };\n            this.readAsArrayBuffer = function (file) {\n                return new Promise(function (resolve, reject) {\n                    _this.fileReader.onload = function () { return resolve(_this.fileReader.result); };\n                    _this.fileReader.onerror = reject;\n                    _this.fileReader.readAsArrayBuffer(file);\n                });\n            };\n            this.bufferedAmountLow = function () {\n                return new Promise(function (resolve, reject) {\n                    try {\n                        _this.bufferAmountLowTimer(resolve);\n                        _this.dataChannel.addEventListener('bufferedamountlow', function () { return resolve(); }, { once: true });\n                    }\n                    catch (err) {\n                        console.log(err);\n                        reject();\n                    }\n                });\n            };\n            this.bufferAmountLowTimer = function (resolve) {\n                setTimeout(function () {\n                    if (_this.dataChannel.bufferedAmount > BYTES_PER_CHUNK) {\n                        _this.bufferedAmountLow();\n                    }\n                    else {\n                        resolve();\n                    }\n                }, 1000);\n            };\n            this.dataChannel.bufferedAmountLowThreshold = BYTES_PER_CHUNK;\n        }\n        return RtcFileSender;\n    }());\n    exports.RtcFileSender = RtcFileSender;\n});\n//# sourceMappingURL=rtcfilesender.js.map",
dependencies: ["../../../shared/constants"],
sourceMap: {},
headerContent: undefined,
mtime: 1553221562231,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
