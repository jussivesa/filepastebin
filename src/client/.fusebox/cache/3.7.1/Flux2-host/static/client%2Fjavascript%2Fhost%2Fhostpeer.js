module.exports = { contents: "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../connection/peerwrapper\", \"../connection/rtcfilesender\", \"../../../shared/constants\", \"../connection/socketfilesender\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var peerwrapper_1 = require(\"../connection/peerwrapper\");\n    var rtcfilesender_1 = require(\"../connection/rtcfilesender\");\n    var constants_1 = require(\"../../../shared/constants\");\n    var RTC_INIT_TIMEOUT = constants_1.Constants.RTC_INIT_TIMEOUT;\n    var socketfilesender_1 = require(\"../connection/socketfilesender\");\n    var HostPeer = /** @class */ (function () {\n        function HostPeer(id, socket, fileSlice) {\n            var _this = this;\n            this.id = id;\n            this.socket = socket;\n            this.fileSlice = fileSlice;\n            this.progress = 0;\n            this.handleMessage = function (message) {\n                _this.rtcWrapper.handleMessage(message);\n            };\n            this.onopen = function (fileSender) {\n                console.log(\"onopen: \" + _this.id);\n                _this.fileSender = fileSender;\n                _this.fileSender.onprogresschanged = _this.onprogresschanged;\n                _this.fileSender.sendFiles();\n            };\n            this.onrtcerror = function (err) { return console.log(\"onerror\" + err); };\n            this.onrtcclose = function () {\n                console.log('onclosed');\n                _this.fileSender = new socketfilesender_1.SocketFileSender(_this.fileSlice, _this.socket, _this.id);\n                _this.fileSender.sendFiles(_this.progress);\n            };\n            this.onprogresschanged = function (progress) {\n                _this.progress = progress;\n                //console.log(this.progress);\n            };\n            this.rtcPeer = new RTCPeerConnection(constants_1.Constants.PeerConfiguration);\n            this.rtcWrapper = new peerwrapper_1.HostPeerWrapper(this.rtcPeer, this.id, this.socket);\n            this.init();\n        }\n        HostPeer.prototype.init = function () {\n            return __awaiter(this, void 0, void 0, function () {\n                var _this = this;\n                return __generator(this, function (_a) {\n                    Promise.race([\n                        this.rtcWrapper.initDataChannel()\n                            .then(function (dataChannel) {\n                            dataChannel.onclose = _this.onrtcclose;\n                            dataChannel.onerror = _this.onrtcerror;\n                            return new rtcfilesender_1.RtcFileSender(_this.fileSlice, dataChannel);\n                        }),\n                        new Promise(function (resolve) {\n                            setTimeout(function () {\n                                resolve(new socketfilesender_1.SocketFileSender(_this.fileSlice, _this.socket, _this.id));\n                            }, RTC_INIT_TIMEOUT);\n                        }),\n                        new Promise(function (resolve) {\n                            var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n                            if (iOS) {\n                                resolve(new socketfilesender_1.SocketFileSender(_this.fileSlice, _this.socket, _this.id));\n                            }\n                        })\n                    ]).then(function (fileSender) {\n                        _this.onopen(fileSender);\n                    });\n                    return [2 /*return*/];\n                });\n            });\n        };\n        return HostPeer;\n    }());\n    exports.HostPeer = HostPeer;\n});\n//# sourceMappingURL=hostpeer.js.map",
dependencies: ["../connection/peerwrapper","../connection/rtcfilesender","../../../shared/constants","../connection/socketfilesender"],
sourceMap: {},
headerContent: undefined,
mtime: 1553221562255,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
